


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
    3 00000000         
    4 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    5 00000000                 THUMB
    6 00000000                 EXPORT           Start
    7 00000000                 EXPORT           Example_Function
    8 00000000                 EXPORT           Part3_Function
    9 00000000                 EXPORT           Part4_Function
   10 00000000                 EXPORT           Part5_Function
   11 00000000                 IMPORT           delay
   12 00000000                 IMPORT           leds_off
   13 00000000                 IMPORT           PortF_Init
   14 00000000                 IMPORT           Example
   15 00000000                 IMPORT           Part3
   16 00000000                 IMPORT           Part4
   17 00000000                 IMPORT           Part5
   18 00000000         
   19 00000000         Start
   20 00000000 F7FF FFFE       BL               PortF_Init  ; Initialize the LE
                                                            Ds and Pushbuttons
   21 00000004 F000 F81C       BL               debug       ; Useful for parts 
                                                            2 and 3
   22 00000008         loop
   23 00000008 492D            LDR              R1, =GPIO_PORTF_DATA_R
   24 0000000A 6808            LDR              R0, [R1]
   25 0000000C F000 0011       AND              R0, #0x11   ;Get just the pushb
                                                            utton values
   26 00000010 2811            CMP              R0, #0x11   ;No buttons pressed
                                                            ?
   27 00000012 D102            BNE              checkSW1
   28 00000014 F7FF FFFE       BL               Example
   29 00000018 E7F6            B                loop
   30 0000001A         checkSW1
   31 0000001A 2801            CMP              R0, #0x01   ;SW1 pressed?
   32 0000001C D102            BNE              checkSW2
   33 0000001E F7FF FFFE       BL               Part3
   34 00000022 E006            B                blink
   35 00000024         checkSW2
   36 00000024 2810            CMP              R0, #0x10   ;SW2 pressed?
   37 00000026 D102            BNE              both
   38 00000028 F7FF FFFE       BL               Part4
   39 0000002C E001            B                blink
   40 0000002E         both
   41 0000002E F7FF FFFE       BL               Part5       ;Both must be press
                                                            ed
   42 00000032         
   43 00000032         ;Create blinking effect
   44 00000032         blink
   45 00000032 F7FF FFFE       BL               delay
   46 00000036 F7FF FFFE       BL               leds_off
   47 0000003A F7FF FFFE       BL               delay
   48 0000003E         
   49 0000003E E7E3            B                loop
   50 00000040         
   51 00000040         



ARM Macro Assembler    Page 2 


   52 00000040         
   53 00000040         debug
   54 00000040         ;Place parts 1 and 2 here
   55 00000040 F04F 0108       MOV              R1, #0x00000008
   56 00000044 F06F 0202       MOV              R2, #0xFFFFFFFD
   57 00000048 F06F 4300       MOV              R3, #0x7FFFFFFF
   58 0000004C 1888            ADDS             R0, R1, R2  ; 0x0000 0005| C
   59 0000004E 1A48            SUBS             R0, R1, R1  ; 0x0000 0000| ZC
   60 00000050 18C8            ADDS             R0, R1, R3  ; 0x8000 0007| NV
   61 00000052 1AD0            SUBS             R0, R2, R3  ; 0x7fff fffe| CV
   62 00000054 18D0            ADDS             R0, R2, R3  ; 0x7fff fffc| C
   63 00000056         
   64 00000056         ;Flag Meanings
   65 00000056         ;N = Negative
   66 00000056         ;Z = Zero
   67 00000056         ;C = Cary (Unsigned)
   68 00000056         ;V = Overflow (Signed) 
   69 00000056         
   70 00000056         
   71 00000056         ; First run:
   72 00000056 F04F 5700       MOV              R7, #0x20000000
   73 0000005A         ;Then:
   74 0000005A 683E            LDR              R6, [R7]
   75 0000005C         ;R6 =A07C F8DF  | Reading from 0x2000003 reading backwar
                       ds to 0x20000000
   76 0000005C 883E            LDRH             R6, [R7]
   77 0000005E         ;R6 =0000 F8DF  | Reads first half of [R7] into R6 (Rema
                       inder being read as 00 | Unsigned)
   78 0000005E 783E            LDRB             R6, [R7]
   79 00000060         ;R6 =0000 00DF  | Reads first byte of [R7] into R6 (Rema
                       inder being read as 00 | Unsigned)
   80 00000060 F9B7 6000       LDRSH            R6, [R7]
   81 00000064         ;R6 =FFFF F8DF  | Reads first half of [R7] into R6 (Rema
                       inder being read as FF | Signed)
   82 00000064 F997 6000       LDRSB            R6,[R7]
   83 00000068         ;R6 =FFFF FFDF  | Reads first byte of [R7] into R6 (Rema
                       inder being read as FF | Signed)
   84 00000068         
   85 00000068         ;Signed means that if the furthest read bit is a '1' the
                        the unfilled spaces will be set to 'F'
   86 00000068         
   87 00000068         ;First run:
   88 00000068 F04F 5700       MOV              R7, #0x20000000
   89 0000006C F107 0702       ADD              R7, #2
   90 00000070         ; Must use add because 0x20000002 cannot be represented 
                       as
   91 00000070         ; an immediate value
   92 00000070         ;Then:
   93 00000070 683E            LDR              R6, [R7]
   94 00000072         ;R6 = 0xF8DF A07C
   95 00000072 883E            LDRH             R6, [R7]
   96 00000074         ;R6 = 0x0000 A07C
   97 00000074 783E            LDRB             R6, [R7]
   98 00000076         ;R6 = 0x0000 007C
   99 00000076 F9B7 6000       LDRSH            R6, [R7]
  100 0000007A         ;R6 = 0xFFFF A07C
  101 0000007A F997 6000       LDRSB            R6,[R7]
  102 0000007E         ;R6 = 0x0000 007c
  103 0000007E         



ARM Macro Assembler    Page 3 


  104 0000007E         ;See above section for explinations
  105 0000007E         
  106 0000007E 4770            BX               LR          ;Returns to main fu
                                                            nction
  107 00000080         
  108 00000080         
  109 00000080         
  110 00000080         ; Returns Z = A+B
  111 00000080         ; A and B are in R0 and R1, respectively
  112 00000080         ; Z should be placed in R0
  113 00000080         Example_Function
  114 00000080 4408            ADD              R0, R0, R1  ;Comment out this i
                                                            nstruction to see t
                                                            he Example fail
  115 00000082 4770            BX               LR
  116 00000084         
  117 00000084         
  118 00000084         ; Should return Z = (A << 2)|(B & 15)
  119 00000084         ; Assume A and B are in R0 and R1, respectively
  120 00000084         ; The value of Z should be placed in R0 at the end
  121 00000084         Part3_Function
  122 00000084 0080            LSLS             R0, R0, #2
  123 00000086 F011 010F       ANDS             R1, R1, #15
  124 0000008A 4308            ORRS             R0, R0, R1
  125 0000008C         
  126 0000008C 4770            BX               LR
  127 0000008E         
  128 0000008E         
  129 0000008E         ; Should return Z = ((A + B) + (A - B)) | (A << B)
  130 0000008E         ; Assume A and B are in R0 and R1, respectively
  131 0000008E         ; The value of Z should be placed in R0 at the end
  132 0000008E         Part4_Function
  133 0000008E 1842            ADDS             R2, R0, R1
  134 00000090 1A43            SUBS             R3, R0, R1
  135 00000092 18D2            ADDS             R2, R2, R3
  136 00000094 4088            LSLS             R0, R0, R1
  137 00000096 4310            ORRS             R0, R2, R0
  138 00000098         
  139 00000098 4770            BX               LR
  140 0000009A         
  141 0000009A         
  142 0000009A         ; Should return Z = X + Y
  143 0000009A         ; Where X = ((A*8)|(B*4)|(C*2))  -> R0 = ( (R0=((R0=R0*8
                       )|(R3=R1*4))) | (R3=R2*2) )
  144 0000009A         ; and Y = ((B xor 2)|(C xor 4)  -> R3 = ( (R1=R1 xor #2)
                        | (R2= R2 xor #4))
  145 0000009A         ; Assume A, B, and C are in R0, R1, and R2, respectively
                       
  146 0000009A         ; The value of Z should be placed in R0 at the end
  147 0000009A         Part5_Function
  148 0000009A 2408            MOVS             R4, #8
  149 0000009C FB00 F004       MUL              R0, R0, R4
  150 000000A0 2404            MOVS             R4, #4
  151 000000A2 FB01 F304       MUL              R3, R1, R4
  152 000000A6         
  153 000000A6 4318            ORRS             R0, R0, R3
  154 000000A8 2402            MOVS             R4, #2
  155 000000AA FB02 F304       MUL              R3, R2, R4
  156 000000AE 4318            ORRS             R0, R0, R3



ARM Macro Assembler    Page 4 


  157 000000B0         
  158 000000B0 2402            MOVS             R4, #2
  159 000000B2 4061            EORS             R1, R1, R4
  160 000000B4 2404            MOVS             R4, #4
  161 000000B6 4062            EORS             R2, R2, R4
  162 000000B8 EA51 0302       ORRS             R3, R1, R2
  163 000000BC         
  164 000000BC 18C0            ADDS             R0, R0, R3
  165 000000BE 4770            BX               LR
  166 000000C0         
  167 000000C0         
  168 000000C0         
  169 000000C0                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  170 000000C0                 END                          ; end of file
              400253FC 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\objects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\PACK\ARM\
Cortex_DFP\1.1.0\Device\ARMCM4\Include -IC:\Keil_v5\ARM\PACK\ARM\Cortex_DFP\1.1
.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --predefine="__UVISION
_VERSION SETA 541" --predefine="ARMCM4 SETA 1" --list=.\listings\main.lst main.
s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 4 in file main.s
   Uses
      None
Comment: .text unused
Example_Function 00000080

Symbol: Example_Function
   Definitions
      At line 113 in file main.s
   Uses
      At line 7 in file main.s
Comment: Example_Function used once
Part3_Function 00000084

Symbol: Part3_Function
   Definitions
      At line 121 in file main.s
   Uses
      At line 8 in file main.s
Comment: Part3_Function used once
Part4_Function 0000008E

Symbol: Part4_Function
   Definitions
      At line 132 in file main.s
   Uses
      At line 9 in file main.s
Comment: Part4_Function used once
Part5_Function 0000009A

Symbol: Part5_Function
   Definitions
      At line 147 in file main.s
   Uses
      At line 10 in file main.s
Comment: Part5_Function used once
Start 00000000

Symbol: Start
   Definitions
      At line 19 in file main.s
   Uses
      At line 6 in file main.s
Comment: Start used once
blink 00000032

Symbol: blink
   Definitions
      At line 44 in file main.s
   Uses
      At line 34 in file main.s
      At line 39 in file main.s

both 0000002E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: both
   Definitions
      At line 40 in file main.s
   Uses
      At line 37 in file main.s
Comment: both used once
checkSW1 0000001A

Symbol: checkSW1
   Definitions
      At line 30 in file main.s
   Uses
      At line 27 in file main.s
Comment: checkSW1 used once
checkSW2 00000024

Symbol: checkSW2
   Definitions
      At line 35 in file main.s
   Uses
      At line 32 in file main.s
Comment: checkSW2 used once
debug 00000040

Symbol: debug
   Definitions
      At line 53 in file main.s
   Uses
      At line 21 in file main.s
Comment: debug used once
loop 00000008

Symbol: loop
   Definitions
      At line 22 in file main.s
   Uses
      At line 29 in file main.s
      At line 49 in file main.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 2 in file main.s
   Uses
      At line 23 in file main.s
Comment: GPIO_PORTF_DATA_R used once
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Example 00000000

Symbol: Example
   Definitions
      At line 14 in file main.s
   Uses
      At line 28 in file main.s
Comment: Example used once
Part3 00000000

Symbol: Part3
   Definitions
      At line 15 in file main.s
   Uses
      At line 33 in file main.s
Comment: Part3 used once
Part4 00000000

Symbol: Part4
   Definitions
      At line 16 in file main.s
   Uses
      At line 38 in file main.s
Comment: Part4 used once
Part5 00000000

Symbol: Part5
   Definitions
      At line 17 in file main.s
   Uses
      At line 41 in file main.s
Comment: Part5 used once
PortF_Init 00000000

Symbol: PortF_Init
   Definitions
      At line 13 in file main.s
   Uses
      At line 20 in file main.s
Comment: PortF_Init used once
delay 00000000

Symbol: delay
   Definitions
      At line 11 in file main.s
   Uses
      At line 45 in file main.s
      At line 47 in file main.s

leds_off 00000000

Symbol: leds_off
   Definitions
      At line 12 in file main.s
   Uses
      At line 46 in file main.s
Comment: leds_off used once
7 symbols
355 symbols in table
